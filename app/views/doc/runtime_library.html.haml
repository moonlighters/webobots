:markdown
  ## Документация по стандартным функциям и константам

  Во время исполнения прошивки можно взаимодействовать с внешним миром по
  средствам вызова стандартных функций и использования значения «констант».

  ### «Константы»
  Игровой мир, в котором происходят сражения ботов, обладает следующими параметрами:

  * углы отсчитываются в градусах от оси X к оси Y
  * единица времени — 1 с
  * единица скорости — 1 см/с
  * <tt>FIELD_SIZE</tt>: поле имеет размеры 1000x1000 см^2
  * <tt>MAX_SPEED</tt>: ограничена максимальная скорость — 100 см/с.
  * <tt>MAX_HEALTH</tt>: здоровье бота изменяется от 0 до 100
  * <tt>ACCELERATION</tt> и <tt>DECELERATION</tt>: разгон и торможение происходят
    с фиксированными ускорениями (15 м/с^2 и 30 м/с^2 соответственно)
  * <tt>RATE_OF_FIRE</tt>: ограничена маскимальная скорострельность — 1.5 выстрела/с
  * <tt>MAX_SPEED_WHEN_ROTATION_POSSIBLE</tt>: поворот бота возможен на любой угол,
    если скорость меньше определенной (50 м/с), иначе поворот невозможен
  * <tt>MAX_LIFE_TIME</tt>: ограничено время существования «мира» — 60 с
  * <tt>BOT_RADIUS</tt>: бот является кругом радиуса 30 см
  * <tt>MISSILE_SPEED</tt>: скоростhttp://ru.wikipedia.org/wiki/Список_программ,_использующих_лицензию_MITь ракеты 200 м/с
  * <tt>EXPLOSION_RADIUS</tt>: радиус взрыва ракеты 50 см
  * <tt>MISSILE_DAMAGE</tt>: максимальный урон от ракеты 10 (при непосредственном столкновении),
    линейно падает до 0 с увеличением расстояния от ракеты до окружности бота

  Более того, не рекомендуется пользоваться численными константами, а
  использовать предопределенные, так как они могут изменяться в новых версиях
  виртуальной машины.
      set_speed(50) # bad
      set_speed(MAX_SPEED_WHEN_ROTATION_POSSIBLE) # good

      if (pos < 30)
        # bad
      end
      if (pos < BOT_RADIUS)
        # good
      end

  ### Функции
  Далее приведен список всех предопределенных функций для взаимодействия с
  игровым миром. Эти функции на момент начала исполнения прошивки уже
  объявлены и доступны для вызова.

  #### posx()
  Возвращает координату X бота

  #### posy()
  Возвращает координату Y бота

  #### angle()
  Возвращает направление движения бота

  #### speed()
  Возвращает текущую скорость бота

  #### desired_speed()
  Возвращает последнюю установленную скорость

  #### health()
  Возвращает здоровье бота

  #### time()
  Возвращает время прошедшее с начала матча

  #### rotate(angle)
  Устанавливает направление движения бота, если
  скорость допустима для поворота

  Возвращает 1, если поворот возможен, 0 - иначе

  #### set_speed(speed)
  Устанавливает скорость, до который бот начнет
  ускоряться или тормозить

  Возвращает 1, если скорость не выходит за допустимые пределы,
  0 - иначе

  #### sleep(time)
  Бот «засыпает» на <tt>time</tt> секунд, при этом движение не останавливается

  Возвращает <tt>time</tt>

  #### enemy_posx()
  Возвращает координату X бота-врага

  #### enemy_posy()
  Возвращает координату Y бота-врага

  #### fire(angle, distance)
  Выпускает ракету в направлении угла <tt>angle</tt>,
  которая взрывается либо на расстоянии <tt>distance</tt>, либо
  от прямого столкновения с вражеским ботом

  Возвращает 1, если выстрел прошел успешно,
  0, если выстрел невозможен из-за ограничения скорострельности

  #### sin(angle)
  Вычисляет синус угла, данного в градусах

  #### cos(angle)
  Вычисляет косинус угла, данного в градусах

  #### atan2(y,x)
  Вычисляет арктангес по <tt>y</tt> и <tt>x</tt>

  Результат лежит в <tt>-180..180</tt>

  #### sqr(x)
  Вычисляет квадрат аргумента

  #### sqrt(x)
  Вычисляет квадратный корень из аргумента

  Может кидать <tt>WFLRuntimeError</tt>, если аргумент отрицателен

  #### rand()
  Возвращает случайное число от 0 до 1
