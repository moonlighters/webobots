:markdown
  ## Документация по языку WaFfLe

  **оператор инструкция операция** - ЧТО ВЫБРАТЬ?! TODO

  **порядок разделов** - TODO

  WaFfLe (англ. *Вафля*, от WFL - *Webobots Firmware Language*) — язык программирования для написания исходных кодов прошивок бота.

  ### Hello world!
  Традиционная программа, печатающая "Hello world!" выглядит довольно просто
      @log "Hello world!"
  В этом случае бот не будет двигаться, а просто распечатает в лог одно сообщение.

  ### Типы данных
  В языке предусмотрен единый тип данных, объединяющий целые числа и числа с плавающей точкой.
      3, 4.5, 0, 100.0
  Строки не являются полноценным типом данных и могут использоваться только для вывода сообщений в лог.

  ### Переменные
  Переменные используются для сохранения значений вычисленных выражений на протяжении исполнения прошивки.

  В любом месте программы можно создать переменную. Имя переменной может состоять из букв латинского алфавита, цифр и символа '<tt>_</tt>', причем начинаться с цифры не может.

  Возможные способы задания значения переменной:

  * конкретным значением <tt>foo = 4</tt>
  * значением другой переменной <tt>foo = bar</tt>
  * произвольным выражением <tt>foo = 2 + 3*4 + bar</tt>

  Переменные имеют область видимости, ограниченную блоком, в котором они были созданы. Это значит, что переменные, созданные внутри блока <tt>if</tt> или <tt>while</tt> или в теле функции, не видны за их пределами. Тем не менее из блока <tt>if</tt> или <tt>while</tt> видны переменные блока, содержащего его, а из тела функции видны глобальные переменные.

  ### Комментарии
  В коде программы можно оставлять комментарии: весь текст от символа '<tt>#</tt>' до конца строки при исполнении игнорируется.
      speed = 10
      time = 1000 / speed   # total time

  ### Встроенные операции
  Доступны следующие математические и логические операции для работы над числами:

  * сложение, вычитание, умножение, деление чисел
  * унарные минус и плюс
  * логические И, ИЛИ, НЕ
  * операции сравнения (больше, больше или равно, равно, не равно, ...)

  *при работе с логическими операциями 0 интерпретируется как Ложь, 1 — Истина*
      a = 2
      b = 3
      c = 0

      a + b     # 5
      a * (-b)  # -6
      a and c   # 0
      a or c    # 1
      not a     # 0
      a > b     # 0
      a < b     # 1
      a >= a    # 1
      b == c    # 0
      a != b    # 1

  ### Средства отладки
  Во время исполнения прошивки есть возможность выводить какую-либо полезную информацию в лог, например, собственную скорость для последующего анализа и совершенствования или исправления алгоритма работы прошивки. Для этих целей используется оператор <tt>@log</tt>:
      @log "My speed", speed()
  После ключевого слова <tt>@log</tt> через запятую перечисляются выражения и строки, которые будут выведены в лог при проведении матча.
      @log "2+3 =", 5

  ### Условные операторы
  Условные операторы используются для реализации различного поведения бота в зависимости от каких-либо факторов, условий. В WaFfLe используется общепринятый оператор <tt>if</tt>:
      if conditional_expression
        expr1
      else
        expr2
      end
  Если значение выражения <tt>conditional_expression</tt> есть Истина, то последующее исполнение продолжится в первой ветке оператора, <tt>expr1</tt>, если Ложь, то во второй ветке, <tt>expr2</tt>. Причем <tt>conditional_expression</tt> — произвольное выражение, а <tt>expr1</tt>, <tt>expr2</tt> могут быть сколь угодно сложными блоками, состоящими из многих операций. Кроме того, вторая ветка (ветка <tt>else</tt>), может быть опущена, тогда при ложности условия исполнение продолжится с инструкции, следующей за условным блоком.
      if 3 != 2
        @log "!="
      else
        @log "=="
      end

      if 1
        # исполнение всегда пойдет сюда
        a = 2+3
        b = a*2
      end

      if (2*2 == 5)
        # исполнение никогда сюда не попадет
        a = 2/0
      end

  ### Циклы
  Циклы используются для повторения одного и того же участка прошивки несколько раз. В WaFfLe используется оператор с предусловием <tt>while</tt>:
      while conditional_expression
        expr
      end
  Если значение выражения <tt>conditional_expression</tt> есть Ложь, исполнение переходит к инструкции, следующей за циклом. Иначе исполняется тело цикла - блок <tt>expr</tt>, по окончании чего исполнение опять переходит на начало цикла. Таким образом, тело цикла повторно исполняется до тех пор, пока значение <tt>conditional_expression</tt> не станет Ложью.
      i = 5
      while i > 0
        @log i
        i = i - 1
      end

      while 1
        @log "Бесконечный цикл!"
      end

  ### Функции
  В WaFfLe можно объявлять и вызывать функции, вынося в них повторяющиеся или сложные блоки. После ключевого слова <tt>def</tt> идет имя функции, в скобках имена аргументов, разделенные запятой (скобки нужны даже если у функции нет аргументов), затем произвольное количество инструкций и ключевое слово <tt>end</tt> в конце.
      def factorial(n)
        if n <= 1
          return 1
        end
        return n * factorial(n - 1)
      end

      a = factorial(1)  # 1
      b = factorial(5)  # 120

      def thirty_seven()
        return 37
      end

      c = thirty_seven()

      def work_hard(times)
        if times < 0
          return
        end
        # work very hard
        # ...
      end

      work_hard(3)
  Оператор <tt>return</tt> используется только в теле функций, он служит для завершения выполнения функции и возвращения значения. В WaFfLe каждая функция возвращает значение, поэтому если значение не указано явно (если <tt>return</tt> используется без аргумента или исполнение дошло до конца тела функции), возвращается 0.
