%h2 Документация по языку WaFfLe

.docs
  WaFfLe (англ. <em>Вафля</em>, от WFL — <i>Webobots Firmware Language</i>) — язык программирования для написания исходных кодов прошивок бота.

  %h3 Hello world!
  Традиционная программа, печатающая "Hello world!" выглядит довольно просто
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:hello_world]}
  В этом случае бот не будет двигаться, а просто распечатает в лог одно сообщение.

  %h3 Типы данных
  В языке предусмотрен единый тип данных, объединяющий целые числа и числа с плавающей точкой.
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:numbers]}
  Строки не являются полноценным типом данных и могут использоваться только для вывода сообщений в лог.

  %h3 Переменные
  Переменные используются для сохранения значений вычисленных выражений на протяжении исполнения прошивки.

  В любом месте программы можно создать переменную. Имя переменной может состоять из букв латинского алфавита, цифр и символа «_», причем начинаться с цифры не может.

  Возможные способы задания значения переменной:

  %ul
    %li
      конкретным значением
      .inline_code foo = 4
    %li
      значением другой переменной
      .inline_code foo = bar
    %li
      произвольным выражением
      .inline_code foo = 2 + 3*4 + bar

  Переменные имеют область видимости, ограниченную блоком, в котором они были созданы. Это значит, что переменные, созданные внутри блока
  .inline_code if
  или
  .inline_code while
  или в теле функции, не видны за их пределами. Тем не менее из блока
  .inline_code if
  или
  .inline_code while
  видны переменные блока, содержащего его, а из тела функции видны глобальные переменные.

  %h3 Комментарии
  В коде программы можно оставлять комментарии: весь текст от символа «#» до конца строки при исполнении игнорируется.
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:comments]}

  %h3 Встроенные операции
  Доступны следующие математические и логические операции для работы над числами:

  %ul
    %li сложение, вычитание, умножение, деление чисел
    %li унарные минус и плюс
    %li логические И, ИЛИ, НЕ
    %li операции сравнения (больше, больше или равно, равно, не равно, ...)

  <em>при работе с логическими операциями 0 интерпретируется как Ложь, 1 — Истина</em>
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:operations]}

  %h3 Средства отладки
  Во время исполнения прошивки есть возможность выводить какую-либо полезную информацию в лог, например, собственную скорость для последующего анализа и совершенствования или исправления алгоритма работы прошивки. Для этих целей используется оператор <div class='inline_code'>@log</div>:
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:log_speed]}
  После ключевого слова 
  .inline_code @log
  через запятую перечисляются выражения и строки, которые будут выведены в лог при проведении матча.
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:log_dummy]}

  %h3 Условные операторы
  Условные операторы используются для реализации различного поведения бота в зависимости от каких-либо факторов, условий. В WaFfLe используется общепринятый оператор <div class='inline_code'>if</div>:
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:if]}
  Если значение выражения
  .inline_code conditional_expression
  есть Истина, то последующее исполнение продолжится в первой ветке оператора, <div class='inline_code'>expr1</div>, если Ложь, то во второй ветке, <div class='inline_code'>expr2</div>. Причем <div class='inline_code'>conditional_expression</div> — произвольное выражение, а <div class='inline_code'>expr1</div>, <div class='inline_code'>expr2</div> могут быть сколь угодно сложными блоками, состоящими из многих операций. Кроме того, вторая ветка (ветка <div class='inline_code'>else</div>), может быть опущена, тогда при ложности условия исполнение продолжится с инструкции, следующей за условным блоком.
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:if_detailed]}

  %h3 Циклы
  Циклы используются для повторения одного и того же участка прошивки несколько раз. В WaFfLe используется оператор с предусловием <div class='inline_code'>while</div>:
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:while]}
  Если значение выражения
  .inline_code conditional_expression
  есть Ложь, исполнение переходит к инструкции, следующей за циклом. Иначе исполняется тело цикла — блок <div class='inline_code'>expr</div>, по окончании чего исполнение опять переходит на начало цикла. Таким образом, тело цикла повторно исполняется до тех пор, пока значение
  .inline_code conditional_expression
  не станет Ложью.
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:while_detailed]}

  %h3 Функции
  В WaFfLe можно объявлять и вызывать функции, вынося в них повторяющиеся или сложные блоки. После ключевого слова
  .inline_code def
  идет имя функции, в скобках имена аргументов, разделенные запятой (скобки нужны даже если у функции нет аргументов), затем произвольное количество инструкций и ключевое слово
  .inline_code end
  в конце.
  = render :partial => 'firmwares/code', :locals => {:code => @samples[:functions]}
  Оператор 
  .inline_code return
  используется только в теле функций, он служит для завершения выполнения функции и возвращения значения. В WaFfLe каждая функция возвращает значение, поэтому если значение не указано явно (если
  .inline_code return
  используется без аргумента или исполнение дошло до конца тела функции), возвращается 0.
  
  %h3 Синтаксические ошибки
  Если какое-либо из правил выше нарушено, вебобот не может выполнить такую прошивку, потому что не может понять,
  что от него хотят. Это называется синтаксической ошибкой. При просмотре кода прошивки сверху указано, есть ли
  в ней синтаксические ошибки. Если есть, с такой прошивкой нельзя будет провести матч.
  
  %h3 Ошибки времени исполнения
  Даже если при наборе кода прошивки не было допущено синтаксических ошибок, то есть она может благополучно начать
  исполняться, что-то может пойти не так уже в процессе исполнения. Типичные ошибки — использование необъявленной
  переменной и извлечение корня из отрицательного числа. Результат подобной операции неопределен, поэтому прошивка
  не может исполняться дальше, и вебобот «зависает». Результат такого матча не засчитывается, а на странице просмотра
  матча указано, какая ошибка произошла.
